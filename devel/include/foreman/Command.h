// Generated by gencpp from file foreman/Command.msg
// DO NOT EDIT!


#ifndef FOREMAN_MESSAGE_COMMAND_H
#define FOREMAN_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace foreman
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : preciseMode(false)
    , eeOrientationMode(false)
    , jointMode(false)
    , targetJoint(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  Command_(const ContainerAllocator& _alloc)
    : preciseMode(false)
    , eeOrientationMode(false)
    , jointMode(false)
    , targetJoint(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _preciseMode_type;
  _preciseMode_type preciseMode;

   typedef uint8_t _eeOrientationMode_type;
  _eeOrientationMode_type eeOrientationMode;

   typedef uint8_t _jointMode_type;
  _jointMode_type jointMode;

   typedef uint32_t _targetJoint_type;
  _targetJoint_type targetJoint;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::foreman::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foreman::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::foreman::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::foreman::Command > CommandPtr;
typedef boost::shared_ptr< ::foreman::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::foreman::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::foreman::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::foreman::Command_<ContainerAllocator1> & lhs, const ::foreman::Command_<ContainerAllocator2> & rhs)
{
  return lhs.preciseMode == rhs.preciseMode &&
    lhs.eeOrientationMode == rhs.eeOrientationMode &&
    lhs.jointMode == rhs.jointMode &&
    lhs.targetJoint == rhs.targetJoint &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::foreman::Command_<ContainerAllocator1> & lhs, const ::foreman::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace foreman

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::foreman::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foreman::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foreman::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foreman::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foreman::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foreman::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::foreman::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e981757b6982377442dcf4f0b1a85562";
  }

  static const char* value(const ::foreman::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe981757b69823774ULL;
  static const uint64_t static_value2 = 0x42dcf4f0b1a85562ULL;
};

template<class ContainerAllocator>
struct DataType< ::foreman::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "foreman/Command";
  }

  static const char* value(const ::foreman::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::foreman::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool preciseMode\n"
"bool eeOrientationMode \n"
"bool jointMode\n"
"uint32 targetJoint\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::foreman::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::foreman::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.preciseMode);
      stream.next(m.eeOrientationMode);
      stream.next(m.jointMode);
      stream.next(m.targetJoint);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foreman::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::foreman::Command_<ContainerAllocator>& v)
  {
    s << indent << "preciseMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.preciseMode);
    s << indent << "eeOrientationMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eeOrientationMode);
    s << indent << "jointMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.jointMode);
    s << indent << "targetJoint: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.targetJoint);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOREMAN_MESSAGE_COMMAND_H
