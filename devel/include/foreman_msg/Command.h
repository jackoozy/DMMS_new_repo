// Generated by gencpp from file foreman_msg/Command.msg
// DO NOT EDIT!


#ifndef FOREMAN_MSG_MESSAGE_COMMAND_H
#define FOREMAN_MSG_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace foreman_msg
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : preciseMode()
    , eeOrientationMode()
    , jointMode()
    , targetJoint()
    , x()
    , y()
    , z()
    , incrementQ()
    , decrementQ()  {
    }
  Command_(const ContainerAllocator& _alloc)
    : preciseMode(_alloc)
    , eeOrientationMode(_alloc)
    , jointMode(_alloc)
    , targetJoint(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , incrementQ(_alloc)
    , decrementQ(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _preciseMode_type;
  _preciseMode_type preciseMode;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _eeOrientationMode_type;
  _eeOrientationMode_type eeOrientationMode;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _jointMode_type;
  _jointMode_type jointMode;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _targetJoint_type;
  _targetJoint_type targetJoint;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _z_type;
  _z_type z;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _incrementQ_type;
  _incrementQ_type incrementQ;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _decrementQ_type;
  _decrementQ_type decrementQ;





  typedef boost::shared_ptr< ::foreman_msg::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foreman_msg::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::foreman_msg::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::foreman_msg::Command > CommandPtr;
typedef boost::shared_ptr< ::foreman_msg::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::foreman_msg::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::foreman_msg::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::foreman_msg::Command_<ContainerAllocator1> & lhs, const ::foreman_msg::Command_<ContainerAllocator2> & rhs)
{
  return lhs.preciseMode == rhs.preciseMode &&
    lhs.eeOrientationMode == rhs.eeOrientationMode &&
    lhs.jointMode == rhs.jointMode &&
    lhs.targetJoint == rhs.targetJoint &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.incrementQ == rhs.incrementQ &&
    lhs.decrementQ == rhs.decrementQ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::foreman_msg::Command_<ContainerAllocator1> & lhs, const ::foreman_msg::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace foreman_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::foreman_msg::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foreman_msg::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foreman_msg::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foreman_msg::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foreman_msg::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foreman_msg::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::foreman_msg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ea48707806b8e8fa7ee906cce3e1a86";
  }

  static const char* value(const ::foreman_msg::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ea48707806b8e8fULL;
  static const uint64_t static_value2 = 0xa7ee906cce3e1a86ULL;
};

template<class ContainerAllocator>
struct DataType< ::foreman_msg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "foreman_msg/Command";
  }

  static const char* value(const ::foreman_msg::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::foreman_msg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Bool preciseMode\n"
"std_msgs/Bool eeOrientationMode \n"
"std_msgs/Bool jointMode\n"
"std_msgs/Int8 targetJoint\n"
"std_msgs/Float32 x\n"
"std_msgs/Float32 y\n"
"std_msgs/Float32 z\n"
"std_msgs/Bool incrementQ\n"
"std_msgs/Bool decrementQ\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::foreman_msg::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::foreman_msg::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.preciseMode);
      stream.next(m.eeOrientationMode);
      stream.next(m.jointMode);
      stream.next(m.targetJoint);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.incrementQ);
      stream.next(m.decrementQ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foreman_msg::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::foreman_msg::Command_<ContainerAllocator>& v)
  {
    s << indent << "preciseMode: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.preciseMode);
    s << indent << "eeOrientationMode: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.eeOrientationMode);
    s << indent << "jointMode: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.jointMode);
    s << indent << "targetJoint: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.targetJoint);
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.z);
    s << indent << "incrementQ: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.incrementQ);
    s << indent << "decrementQ: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.decrementQ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOREMAN_MSG_MESSAGE_COMMAND_H
